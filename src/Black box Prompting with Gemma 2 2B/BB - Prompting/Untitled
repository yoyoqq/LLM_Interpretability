{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPISoHUBRg++CjXxloHRstK"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8MBT6OeGEw_6","executionInfo":{"status":"ok","timestamp":1745083476390,"user_tz":-60,"elapsed":15,"user":{"displayName":"Yagol Xu Chen","userId":"00929278906170525619"}},"outputId":"ea810ca1-789c-4ed0-f63a-c461ed779478"},"outputs":[{"output_type":"stream","name":"stdout","text":["['word', 'another_one', 'test_case', 'just', 'a_thing', 'tex']\n"]}],"source":["import re\n","\n","text = \"_word_ another_one _test_case_ _just_ _a_thing, %$ tex_\"\n","\n","def clean(text):\n","  matches = re.findall(r'\\b\\w*_\\w*\\b', text)\n","  # Clean outer underscores if they exist\n","  cleaned = [word.strip('_') for word in matches]\n","  return cleaned\n","print(cleaned)\n"]},{"cell_type":"code","source":["import re\n","\n","def get_alpha_words_lower(s):\n","    return re.sub(r'[^a-zA-Z]+', ' ', s).lower().strip()\n","\n","def extract_skill_words(s):\n","    s = get_alpha_words_lower(s)\n","    match = re.search(r'skill(.*?)(?=reason)', s, re.IGNORECASE)\n","    if match:\n","        raw = match.group(1)\n","        cleaned = re.sub(r'[^a-zA-Z]+', ' ', raw).lower().strip()\n","        return cleaned\n","    else:\n","        return ''\n"],"metadata":{"id":"HG3hxx3pQX8F","executionInfo":{"status":"ok","timestamp":1745086577504,"user_tz":-60,"elapsed":8,"user":{"displayName":"Yagol Xu Chen","userId":"00929278906170525619"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["import re\n","\n","def get_alpha_words_lower(s):\n","    return re.sub(r'[^a-zA-Z]+', ' ', s).lower().strip()\n","\n","def extract_skill_words(s):\n","    # Case-insensitive match for skill â†’ reason\n","    match = re.search(r'skill\\s*[:\\-]?\\s*(.*?)(?=\\s*reason\\s*[:\\-]?)', s, re.IGNORECASE | re.DOTALL)\n","\n","    if match:\n","        raw = match.group(1)\n","    else:\n","        # fallback: extract everything before the first 'reason' (case-insensitive)\n","        split = re.split(r'reason\\s*[:\\-]?', s, flags=re.IGNORECASE)\n","        raw = split[0] if split else s\n","\n","    cleaned = get_alpha_words_lower(raw)\n","    return cleaned\n"],"metadata":{"id":"ccvIOgvHR1Ef","executionInfo":{"status":"ok","timestamp":1745086924705,"user_tz":-60,"elapsed":5,"user":{"displayName":"Yagol Xu Chen","userId":"00929278906170525619"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["s = \"Isomorphism Reason: An isomorphism is a bijection between two groups, meaning a function that is both injective and surjective. In other words, a bijection preserves the structure of the groups, meaning that the group operations and other algebraic properties are the same in both groups.\"\n","print(extract_skill_words(s))\n","# Output: 'math and logic'\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yZRTegwEEz8i","executionInfo":{"status":"ok","timestamp":1745086925484,"user_tz":-60,"elapsed":11,"user":{"displayName":"Yagol Xu Chen","userId":"00929278906170525619"}},"outputId":"d0357fc2-39c7-42a2-ba1a-12c6313bcdcd"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["isomorphism\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import re\n","\n","def to_underscored_skill(s):\n","    if pd.isna(s):\n","        return ''\n","    # Keep only a-z and A-Z, replace non-alpha with space, lowercase, then join with underscores\n","    s_clean = re.sub(r'[^a-zA-Z]+', ' ', str(s)).lower().strip()\n","    return '_'.join(s_clean.split())\n","\n","# Apply to column\n","print(to_underscored_skill(\"Mathematical Reasoning & Logic\"))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iyiLO7yGQWyY","executionInfo":{"status":"ok","timestamp":1745088658426,"user_tz":-60,"elapsed":29,"user":{"displayName":"Yagol Xu Chen","userId":"00929278906170525619"}},"outputId":"fd3fe3ed-b860-41e7-8cc4-032920259f76"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["mathematical_reasoning_logic\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"9-QaaPhXYvrO"},"execution_count":null,"outputs":[]}]}